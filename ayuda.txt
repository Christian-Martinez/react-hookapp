shorkuts
rafc				export Funct Compon
imp					import
useState			crea un useState

CustomHooks	centraliza la logica (ej para los formularios), se puede incluir las validaciones

useState		hook que permite añadir el estado a un componente de función.
	Declara una “variable de estado”, no puede ser llamado de manera condicional(en un if)
useEffect		hook que permite ejecutar un efecto secundario cuando algo suceda en nuestro componente
	recom: trabajar los useEffect de manera individual es decir	realizar cambios especificos en una 
	parte del state o de la aplicacion(tb aplica a funciones u objetos)
useRef			hook para mantener una referencia mutable
	ejemplo si demontamos un component dejara de cargar el state
useLayoutEffect	hook idéntica a useEffect, pero se dispara de forma síncrona después de 
	todas las mutaciones de DOM	ej traer las dimensiones de un div
React.memo		previene que el component se vuelva a renderizar si sus prop son las mismas
useMemo         hook que memoriza un valor si los argumentos son iguales, si cambian cambia el valor
useCallback     hook que retorna una funcion(componente) memorizada, si non lo manda con el useCallback
	siempre lo va estar generando una nueva version por cada renderizado del componente padre,
	(se use con useEffect que tiene una dependencia y esta tiene una funcion debe usar el useCallback 
	porque de esta manera la anterior funcion no esta cambiando)

useReducer es igual al useState pero es mas utilizado cuando hay mas acciones que pueden modificar el state
	en la funcion de reducer estan las acciones de mi aplicacion
	tendria que revisar los reducer para ver como maneja la logica de la manipulacion
	de cada posible accion que esa aplicacion pueda utilizar

useContext ayuda en la comunicacion entre componentes sin mandarlo por las props